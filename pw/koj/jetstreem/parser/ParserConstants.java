/* Generated By:JavaCC: Do not edit this line. ParserConstants.java */
package pw.koj.jetstreem.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SPACES = 1;
  /** RegularExpression Id. */
  int IF = 2;
  /** RegularExpression Id. */
  int ELSE = 3;
  /** RegularExpression Id. */
  int BREAK = 4;
  /** RegularExpression Id. */
  int EMIT = 5;
  /** RegularExpression Id. */
  int RETURN = 6;
  /** RegularExpression Id. */
  int NIL = 7;
  /** RegularExpression Id. */
  int TRUE = 8;
  /** RegularExpression Id. */
  int FALSE = 9;
  /** RegularExpression Id. */
  int OP_PLUS = 10;
  /** RegularExpression Id. */
  int OP_MINUS = 11;
  /** RegularExpression Id. */
  int OP_MULT = 12;
  /** RegularExpression Id. */
  int OP_DIV = 13;
  /** RegularExpression Id. */
  int OP_MOD = 14;
  /** RegularExpression Id. */
  int OP_EQ = 15;
  /** RegularExpression Id. */
  int OP_NEQ = 16;
  /** RegularExpression Id. */
  int OP_LT = 17;
  /** RegularExpression Id. */
  int OP_LE = 18;
  /** RegularExpression Id. */
  int OP_GT = 19;
  /** RegularExpression Id. */
  int OP_GE = 20;
  /** RegularExpression Id. */
  int OP_AND = 21;
  /** RegularExpression Id. */
  int OP_OR = 22;
  /** RegularExpression Id. */
  int OP_BAR = 23;
  /** RegularExpression Id. */
  int OP_AMPER = 24;
  /** RegularExpression Id. */
  int OP_LASGN = 25;
  /** RegularExpression Id. */
  int OP_RASGN = 26;
  /** RegularExpression Id. */
  int DOT = 27;
  /** RegularExpression Id. */
  int BEG_PAR = 28;
  /** RegularExpression Id. */
  int BEG_BRK = 29;
  /** RegularExpression Id. */
  int BEG_BRC = 30;
  /** RegularExpression Id. */
  int COMMA = 31;
  /** RegularExpression Id. */
  int SEM_CLN = 32;
  /** RegularExpression Id. */
  int LIT_NUMBER = 33;
  /** RegularExpression Id. */
  int LIT_STRING = 37;
  /** RegularExpression Id. */
  int IDENTIFIER = 38;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int INSIDE_STRING = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<SPACES>",
    "<IF>",
    "<ELSE>",
    "<BREAK>",
    "<EMIT>",
    "<RETURN>",
    "<NIL>",
    "<TRUE>",
    "<FALSE>",
    "<OP_PLUS>",
    "<OP_MINUS>",
    "<OP_MULT>",
    "<OP_DIV>",
    "<OP_MOD>",
    "<OP_EQ>",
    "<OP_NEQ>",
    "<OP_LT>",
    "<OP_LE>",
    "<OP_GT>",
    "<OP_GE>",
    "<OP_AND>",
    "<OP_OR>",
    "<OP_BAR>",
    "<OP_AMPER>",
    "<OP_LASGN>",
    "<OP_RASGN>",
    "<DOT>",
    "<BEG_PAR>",
    "<BEG_BRK>",
    "<BEG_BRC>",
    "<COMMA>",
    "<SEM_CLN>",
    "<LIT_NUMBER>",
    "\"\\\"\"",
    "<token of kind 35>",
    "<token of kind 36>",
    "\"\\\"\"",
    "<IDENTIFIER>",
    "\"\\n\"",
    "\"=\"",
    "\"!\"",
    "\"~\"",
    "\")\"",
    "\"]\"",
    "\":\"",
    "\"}\"",
  };

}
