/* Generated By:JavaCC: Do not edit this line. ParserTokenManager.java */
package pw.koj.jetstreem.parser;
import java.lang.reflect.*;
import java.util.*;
import java.io.*;
import java.time.*;
import java.time.format.*;
import pw.koj.jetstreem.ast.*;
import pw.koj.jetstreem.type.*;
import pw.koj.jetstreem.compiler.*;
import org.ho.yaml.Yaml;

/** Token Manager. */
public class ParserTokenManager implements ParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x8000000000000000L) != 0L)
            return 127;
         if ((active1 & 0x2L) != 0L)
            return 28;
         if ((active0 & 0x100000000000L) != 0L)
            return 128;
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 60;
            return 6;
         }
         if ((active0 & 0x3fb08L) != 0L)
         {
            jjmatchedKind = 60;
            return 129;
         }
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 60;
            return 11;
         }
         return -1;
      case 1:
         if ((active0 & 0x8L) != 0L)
            return 129;
         if ((active0 & 0x3ff80L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 1;
            return 129;
         }
         return -1;
      case 2:
         if ((active0 & 0xd000L) != 0L)
            return 129;
         if ((active0 & 0x32f80L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 2;
            return 129;
         }
         return -1;
      case 3:
         if ((active0 & 0x10080L) != 0L)
            return 129;
         if ((active0 & 0x22f00L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 3;
            return 129;
         }
         return -1;
      case 4:
         if ((active0 & 0x20400L) != 0L)
            return 129;
         if ((active0 & 0x2b00L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 4;
            return 129;
         }
         return -1;
      case 5:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 5;
            return 129;
         }
         if ((active0 & 0x2900L) != 0L)
            return 129;
         return -1;
      case 6:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 6;
            return 129;
         }
         return -1;
      case 7:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 7;
            return 129;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 10:
         return jjStartNfaWithStates_0(0, 63, 127);
      case 13:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1L);
      case 33:
         return jjStartNfaWithStates_0(0, 65, 28);
      case 34:
         return jjStopAtPos(0, 54);
      case 41:
         return jjStartNfaWithStates_0(0, 44, 128);
      case 64:
         return jjStopAtPos(0, 67);
      case 93:
         return jjStopAtPos(0, 45);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x400L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x1000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x80L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x20000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x808L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x2000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0xc200L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x100L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x10000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 46);
      case 126:
         return jjStopAtPos(0, 66);
      default :
         return jjMoveNfa_0(1, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(1, 64);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x20200L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x7100L, active1, 0L);
      case 102:
         if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(1, 3, 129);
         break;
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x400L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x880L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x400L);
      case 102:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 12, 129);
         break;
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x80L);
      case 108:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 15, 129);
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x200L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x800L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x2100L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L);
      case 119:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 14, 129);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 16, 129);
         return jjMoveStringLiteralDfa4_0(active0, 0x200L);
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x800L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x20400L);
      case 116:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 7, 129);
         break;
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 17, 129);
         break;
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x900L);
      case 115:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 10, 129);
         return jjMoveStringLiteralDfa5_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 13, 129);
         break;
      case 110:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 8, 129);
         break;
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x200L);
      case 116:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 11, 129);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(8, 9, 129);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 127;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 6:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 60)
                        kind = 60;
                     jjCheckNAdd(126);
                  }
                  else if (curChar == 58)
                  {
                     if (kind > 59)
                        kind = 59;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(124, 125);
                  break;
               case 128:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(102, 107);
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 103;
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(98, 101);
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 129:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 60)
                        kind = 60;
                     jjCheckNAdd(126);
                  }
                  else if (curChar == 58)
                  {
                     if (kind > 59)
                        kind = 59;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(124, 125);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(69, 70);
                  else if ((0x100000600L & l) != 0L)
                     jjCheckNAddTwoStates(56, 57);
                  else if (curChar == 58)
                  {
                     if (kind > 49)
                        kind = 49;
                     jjCheckNAddTwoStates(109, 110);
                  }
                  else if (curChar == 41)
                     jjCheckNAddStates(0, 3);
                  else if (curChar == 60)
                     jjAddStates(4, 5);
                  else if (curChar == 61)
                     jjAddStates(6, 7);
                  else if (curChar == 59)
                  {
                     if (kind > 48)
                        kind = 48;
                     jjCheckNAdd(68);
                  }
                  else if (curChar == 44)
                  {
                     if (kind > 47)
                        kind = 47;
                     jjCheckNAdd(66);
                  }
                  else if (curChar == 40)
                  {
                     if (kind > 41)
                        kind = 41;
                     jjCheckNAdd(60);
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 40)
                        kind = 40;
                     jjCheckNAdd(58);
                  }
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 53;
                  else if (curChar == 38)
                  {
                     if (kind > 32)
                        kind = 32;
                     jjCheckNAdd(47);
                  }
                  else if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 35;
                  else if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 28;
                  else if (curChar == 37)
                  {
                     if (kind > 22)
                        kind = 22;
                     jjCheckNAdd(27);
                  }
                  else if (curChar == 47)
                  {
                     if (kind > 21)
                        kind = 21;
                     jjCheckNAdd(25);
                  }
                  else if (curChar == 42)
                  {
                     if (kind > 20)
                        kind = 20;
                     jjCheckNAdd(23);
                  }
                  else if (curChar == 43)
                  {
                     if (kind > 18)
                        kind = 18;
                     jjCheckNAdd(19);
                  }
                  else if (curChar == 35)
                  {
                     if (kind > 2)
                        kind = 2;
                     jjCheckNAdd(2);
                  }
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 50)
                        kind = 50;
                     jjCheckNAddStates(8, 10);
                  }
                  else if ((0x100001200L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                     jjCheckNAdd(0);
                  }
                  else if (curChar == 48)
                     jjAddStates(11, 12);
                  else if (curChar == 61)
                  {
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAdd(52);
                  }
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 48;
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 38;
                  else if (curChar == 62)
                  {
                     if (kind > 27)
                        kind = 27;
                     jjCheckNAdd(34);
                  }
                  else if (curChar == 60)
                  {
                     if (kind > 25)
                        kind = 25;
                     jjCheckNAdd(32);
                  }
                  else if (curChar == 45)
                  {
                     if (kind > 19)
                        kind = 19;
                     jjCheckNAdd(21);
                  }
                  if (curChar == 48)
                  {
                     if (kind > 50)
                        kind = 50;
                     jjCheckNAdd(115);
                  }
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 60)
                        kind = 60;
                     jjCheckNAdd(126);
                  }
                  else if (curChar == 58)
                  {
                     if (kind > 59)
                        kind = 59;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(124, 125);
                  break;
               case 127:
                  if ((0x100000600L & l) != 0L)
                     jjCheckNAddTwoStates(56, 57);
                  else if (curChar == 46)
                  {
                     if (kind > 40)
                        kind = 40;
                     jjCheckNAdd(58);
                  }
                  break;
               case 0:
                  if ((0x100001200L & l) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAdd(2);
                  break;
               case 4:
                  if ((0x100000600L & l) == 0L)
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 9:
                  if ((0x100000600L & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 14:
                  if ((0x100000600L & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 18:
                  if (curChar != 43)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAdd(19);
                  break;
               case 19:
                  if ((0x100000600L & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  jjCheckNAdd(19);
                  break;
               case 20:
                  if (curChar != 45)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjCheckNAdd(21);
                  break;
               case 21:
                  if ((0x100000600L & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjCheckNAdd(21);
                  break;
               case 22:
                  if (curChar != 42)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAdd(23);
                  break;
               case 23:
                  if ((0x100000600L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjCheckNAdd(23);
                  break;
               case 24:
                  if (curChar != 47)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAdd(25);
                  break;
               case 25:
                  if ((0x100000600L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  jjCheckNAdd(25);
                  break;
               case 26:
                  if (curChar != 37)
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjCheckNAdd(27);
                  break;
               case 27:
                  if ((0x100000600L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjCheckNAdd(27);
                  break;
               case 28:
                  if (curChar != 61)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAdd(29);
                  break;
               case 29:
                  if ((0x100000600L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAdd(29);
                  break;
               case 30:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 31:
                  if (curChar != 60)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAdd(32);
                  break;
               case 32:
                  if ((0x100000600L & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAdd(32);
                  break;
               case 33:
                  if (curChar != 62)
                     break;
                  if (kind > 27)
                     kind = 27;
                  jjCheckNAdd(34);
                  break;
               case 34:
                  if ((0x100000600L & l) == 0L)
                     break;
                  if (kind > 27)
                     kind = 27;
                  jjCheckNAdd(34);
                  break;
               case 35:
                  if (curChar != 61)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAdd(36);
                  break;
               case 36:
                  if ((0x100000600L & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAdd(36);
                  break;
               case 37:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 38:
                  if (curChar != 38)
                     break;
                  if (kind > 29)
                     kind = 29;
                  jjCheckNAdd(39);
                  break;
               case 39:
                  if ((0x100000600L & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  jjCheckNAdd(39);
                  break;
               case 40:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 42:
                  if ((0x100000600L & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 45:
                  if ((0x100000600L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 46:
                  if (curChar != 38)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAdd(47);
                  break;
               case 47:
                  if ((0x100000600L & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAdd(47);
                  break;
               case 48:
                  if (curChar != 58)
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAdd(49);
                  break;
               case 49:
                  if ((0x100000600L & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAdd(49);
                  break;
               case 50:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 51:
                  if (curChar != 61)
                     break;
                  if (kind > 34)
                     kind = 34;
                  jjCheckNAdd(52);
                  break;
               case 52:
                  if ((0x100000600L & l) == 0L)
                     break;
                  if (kind > 34)
                     kind = 34;
                  jjCheckNAdd(52);
                  break;
               case 53:
                  if (curChar != 62)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAdd(54);
                  break;
               case 54:
                  if ((0x100000600L & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAdd(54);
                  break;
               case 55:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 56:
                  if ((0x100000600L & l) != 0L)
                     jjCheckNAddTwoStates(56, 57);
                  break;
               case 57:
                  if (curChar != 46)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAdd(58);
                  break;
               case 58:
                  if ((0x100000600L & l) == 0L)
                     break;
                  if (kind > 40)
                     kind = 40;
                  jjCheckNAdd(58);
                  break;
               case 59:
                  if (curChar != 40)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAdd(60);
                  break;
               case 60:
                  if ((0x100000600L & l) == 0L)
                     break;
                  if (kind > 41)
                     kind = 41;
                  jjCheckNAdd(60);
                  break;
               case 62:
                  if ((0x100000600L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if ((0x100000600L & l) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 65:
                  if (curChar != 44)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAdd(66);
                  break;
               case 66:
                  if ((0x100000600L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAdd(66);
                  break;
               case 67:
                  if (curChar != 59)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjCheckNAdd(68);
                  break;
               case 68:
                  if ((0x100000600L & l) == 0L)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjCheckNAdd(68);
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(69, 70);
                  break;
               case 70:
                  if (curChar == 46)
                     jjCheckNAdd(71);
                  break;
               case 71:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(71, 72);
                  break;
               case 72:
                  if (curChar == 46)
                     jjCheckNAdd(73);
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAddTwoStates(73, 74);
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(13, 14);
                  break;
               case 76:
                  if (curChar == 58)
                     jjCheckNAdd(77);
                  break;
               case 77:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAddStates(15, 18);
                  break;
               case 78:
                  if (curChar == 58)
                     jjCheckNAdd(79);
                  break;
               case 79:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAddStates(19, 22);
                  break;
               case 80:
                  if (curChar == 46)
                     jjCheckNAdd(81);
                  break;
               case 81:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAddStates(23, 25);
                  break;
               case 83:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(84);
                  break;
               case 84:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAddTwoStates(84, 85);
                  break;
               case 85:
                  if (curChar == 58)
                     jjCheckNAdd(86);
                  break;
               case 86:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(86);
                  break;
               case 87:
                  if (curChar == 61)
                     jjAddStates(6, 7);
                  break;
               case 88:
                  if (curChar != 61)
                     break;
                  if (kind > 23)
                     kind = 23;
                  jjCheckNAdd(89);
                  break;
               case 89:
                  if ((0x100000600L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  jjCheckNAdd(89);
                  break;
               case 90:
                  if (curChar != 62)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAdd(91);
                  break;
               case 91:
                  if ((0x100000600L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAdd(91);
                  break;
               case 92:
                  if (curChar == 60)
                     jjAddStates(4, 5);
                  break;
               case 93:
                  if (curChar != 61)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAdd(94);
                  break;
               case 94:
                  if ((0x100000600L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAdd(94);
                  break;
               case 95:
                  if (curChar != 45)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAdd(96);
                  break;
               case 96:
                  if ((0x100000600L & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAdd(96);
                  break;
               case 97:
                  if (curChar == 41)
                     jjCheckNAddStates(0, 3);
                  break;
               case 98:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(98, 101);
                  break;
               case 99:
                  if (curChar != 62)
                     break;
                  if (kind > 38)
                     kind = 38;
                  jjCheckNAdd(100);
                  break;
               case 100:
                  if ((0x100000600L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  jjCheckNAdd(100);
                  break;
               case 101:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 102:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(102, 107);
                  break;
               case 103:
                  if (curChar == 62)
                     jjCheckNAddTwoStates(104, 105);
                  break;
               case 104:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(104, 105);
                  break;
               case 106:
                  if ((0x100000600L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 107:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 108:
                  if (curChar != 58)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAddTwoStates(109, 110);
                  break;
               case 109:
                  if ((0x100000600L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAdd(109);
                  break;
               case 111:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 112:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  jjCheckNAddStates(8, 10);
                  break;
               case 113:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  jjCheckNAdd(113);
                  break;
               case 114:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(114, 115);
                  break;
               case 115:
                  if (curChar == 46)
                     jjCheckNAdd(116);
                  break;
               case 116:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAdd(116);
                  break;
               case 117:
                  if (curChar != 48)
                     break;
                  if (kind > 50)
                     kind = 50;
                  jjCheckNAdd(115);
                  break;
               case 118:
                  if (curChar == 48)
                     jjAddStates(11, 12);
                  break;
               case 120:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 122:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 124:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(124, 125);
                  break;
               case 125:
                  if (curChar == 58 && kind > 59)
                     kind = 59;
                  break;
               case 126:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAdd(126);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 6:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 60)
                        kind = 60;
                     jjCheckNAdd(126);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(124, 125);
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 129:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 60)
                        kind = 60;
                     jjCheckNAdd(126);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(124, 125);
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 60)
                        kind = 60;
                     jjCheckNAddStates(26, 28);
                  }
                  else if (curChar == 123)
                  {
                     if (kind > 43)
                        kind = 43;
                     jjstateSet[jjnewStateCnt++] = 64;
                  }
                  else if (curChar == 91)
                  {
                     if (kind > 42)
                        kind = 42;
                     jjstateSet[jjnewStateCnt++] = 62;
                  }
                  else if (curChar == 124)
                  {
                     if (kind > 31)
                        kind = 31;
                     jjstateSet[jjnewStateCnt++] = 45;
                  }
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 41;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 16;
                  else if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 11;
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 11:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 60)
                        kind = 60;
                     jjCheckNAdd(126);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(124, 125);
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 2:
                  if (kind > 2)
                     kind = 2;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 3:
                  if (curChar != 101)
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 5:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 7:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar != 101)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 10:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 12:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar != 112)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 15:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 16:
                  if (curChar == 107)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 41:
                  if (curChar != 124)
                     break;
                  if (kind > 30)
                     kind = 30;
                  jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 43:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 44:
                  if (curChar != 124)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 61:
                  if (curChar != 91)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 63:
                  if (curChar != 123)
                     break;
                  if (kind > 43)
                     kind = 43;
                  jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 74:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 82:
                  if (curChar == 90 && kind > 62)
                     kind = 62;
                  break;
               case 105:
                  if (curChar != 123)
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 110:
               case 111:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAdd(111);
                  break;
               case 119:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 121:
                  if (curChar == 120)
                     jjCheckNAdd(122);
                  break;
               case 122:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAdd(122);
                  break;
               case 123:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAddStates(26, 28);
                  break;
               case 124:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(124, 125);
                  break;
               case 126:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAdd(126);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 127 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 34:
         return jjStartNfaWithStates_1(0, 57, 4);
      default :
         return jjMoveNfa_1(1, 0);
   }
}
private int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 5;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                  {
                     if (kind > 55)
                        kind = 55;
                     jjCheckNAdd(0);
                  }
                  else if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 0:
                  if ((0xfffffffbffffdbffL & l) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if (kind > 56)
                     kind = 56;
                  break;
               case 3:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 4:
                  if (curChar == 58 && kind > 58)
                     kind = 58;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0xffffffffefffffffL & l) != 0L)
                  {
                     if (kind > 55)
                        kind = 55;
                     jjCheckNAdd(0);
                  }
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if ((0xffffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if (kind > 56)
                     kind = 56;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 56)
                     kind = 56;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 5 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   98, 101, 102, 107, 93, 95, 88, 90, 113, 114, 115, 119, 121, 75, 76, 77, 
   78, 82, 83, 79, 80, 82, 83, 81, 82, 83, 124, 125, 126, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, "\151\146", null, null, null, "\145\155\151\164", 
"\162\145\164\165\162\156", "\156\141\155\145\163\160\141\143\145", "\143\154\141\163\163", 
"\151\155\160\157\162\164", "\144\145\146", "\155\145\164\150\157\144", "\156\145\167", "\156\151\154", 
"\164\162\165\145", "\146\141\154\163\145", null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, "\51", "\135", "\175", null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, "\12", "\15\12", "\41", 
"\176", "\100", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "INSIDE_STRING",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, 1, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfe3ffffffffffff9L, 0xfL, 
};
static final long[] jjtoSkip = {
   0x6L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x6L, 0x0L, 
};
static final long[] jjtoMore = {
   0x1c0000000000000L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[127];
private final int[] jjstateSet = new int[254];
protected char curChar;
/** Constructor. */
public ParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public ParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 127; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
           }
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
