/* Generated By:JavaCC: Do not edit this line. Parser.java */
package pw.koj.jetstreem.parser;

import java.lang.reflect.*;
import java.util.*;
import java.io.*;
import pw.koj.jetstreem.ast.*;
import pw.koj.jetstreem.type.*;


public class Parser implements ParserConstants {
    public static void main(String[] args) {
        for(String arg: args) {
            try {
                parseFile(new File(arg));
            }
            catch(ParseException ex) {
                System.out.println(ex.getMessage());
            }
            catch(FileNotFoundException ex) {
                System.out.println(ex.getMessage());
            }
            catch(UnsupportedEncodingException ex) {
                System.out.println(ex.getMessage());
            }
        }
    }

    private String sourceName;
    private boolean debug;

    public Parser(Reader rdr, String name) {
        this(rdr, name, false);
    }

    public Parser(Reader rdr, String name, boolean debug) {
        this(rdr);
        this.sourceName = name;
        this.debug = debug;
    }

    public static void parseFile(File file)
        throws ParseException, FileNotFoundException, UnsupportedEncodingException {
        newFileParser(file).program();
    }

    public static final String SOURCE_ENCODING = "UTF-8";

    public static Parser newFileParser(File file)
        throws FileNotFoundException, UnsupportedEncodingException {
          BufferedReader rdr =
              new BufferedReader(
                  new InputStreamReader(new FileInputStream(file),
                                        SOURCE_ENCODING));
          return new Parser(rdr, file.getName());
    }

    private IntegerLiteralNode integerNode(Location loc, String image) {
        long i = Long.parseLong(image);
        return new IntegerLiteralNode(loc, IntegerTypeRef.intRef(), i);
    }

    private DoubleLiteralNode doubleNode(Location loc, String image) {
        double l = Double.parseDouble(image);
        return new DoubleLiteralNode(loc, DoubleTypeRef.doubleRef(), l);
    }

    private String stringVal(String str) throws ParseException {
        int pos = 0;
        int idx;
        StringBuffer buf = new StringBuffer();
        String image = str.substring(1, str.length() - 1);

        while((idx = image.indexOf("\u005c\u005c", pos)) >= 0) {
            buf.append(image.substring(pos, idx));
            if (image.length() >= idx + 4
                    && Character.isDigit(image.charAt(idx + 1))
                    && Character.isDigit(image.charAt(idx + 2))
                    && Character.isDigit(image.charAt(idx + 3))) {
                buf.append(unescapeOctal(image.substring(idx + 1, idx + 4)));
                pos = idx + 4;
            }
            else {
                buf.append(unescapeSeq(image.charAt(idx + 1)));
                pos = idx + 2;
            }
        }
        if (pos < image.length()) {
            buf.append(image.substring(pos, image.length()));
        }
        return buf.toString();
    }

    private static final int charMax = 255;

    private char unescapeOctal(String digits) throws ParseException {
        int i = Integer.parseInt(digits, 8);
        if (i > charMax) {
            throw new ParseException("octal character sequence out of range: \u005c\u005c" + digits);
        }
        return (char)i;
    }

    private char unescapeSeq(char c) throws ParseException {
        switch (c) {
        case '0': return '\u005c0';
        case '"': return '"';
        case '\u005c'': return '\u005c'';
        case 'f': return '\u005cf';
        case 'n': return '\u005cn';
        case 'r': return '\u005cr';
        case 't': return '\u005ct';
        // more sequences TBD
        default:
            throw new ParseException("unknown escape sequence: \u005c"\u005c\u005c" + c);
        }
    }


    protected Location location(Token t) {
        return new Location(sourceName, t);
    }

/*
 * Syntactic Analysis
 */
  final public void program() throws ParseException {
    trace_call("program");
    try {
      compstmt();
      jj_consume_token(0);
            System.out.println("Syntax OK");
    } finally {
      trace_return("program");
    }
  }

  final public void compstmt() throws ParseException {
    trace_call("compstmt");
    try {
      if (jj_2_1(2147483647)) {
        stmts();
      } else {
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEM_CLN:
      case 40:
        terms();
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
    } finally {
      trace_return("compstmt");
    }
  }

  final public void terms() throws ParseException {
    trace_call("terms");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEM_CLN:
        jj_consume_token(SEM_CLN);
        break;
      case 40:
        jj_consume_token(40);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEM_CLN:
        case 40:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_1;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEM_CLN:
          jj_consume_token(SEM_CLN);
          break;
        case 40:
          jj_consume_token(40);
          break;
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("terms");
    }
  }

  final public void stmts() throws ParseException {
    trace_call("stmts");
    try {
      stmt();
      label_2:
      while (true) {
        if (jj_2_2(2147483647)) {
          ;
        } else {
          break label_2;
        }
        terms();
        stmt();
      }
    } finally {
      trace_return("stmts");
    }
  }

  final public void stmt() throws ParseException {
    trace_call("stmt");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EMIT:
        jj_consume_token(EMIT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case NIL:
        case TRUE:
        case FALSE:
        case OP_PLUS:
        case OP_MINUS:
        case BEG_PAR:
        case BEG_BRK:
        case BEG_BRC:
        case LIT_INTEGER:
        case LIT_DOUBLE:
        case LIT_STRING:
        case IDENTIFIER:
        case 42:
        case 43:
          args();
          break;
        default:
          jj_la1[4] = jj_gen;
          ;
        }
        break;
      case RETURN:
        jj_consume_token(RETURN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case NIL:
        case TRUE:
        case FALSE:
        case OP_PLUS:
        case OP_MINUS:
        case BEG_PAR:
        case BEG_BRK:
        case BEG_BRC:
        case LIT_INTEGER:
        case LIT_DOUBLE:
        case LIT_STRING:
        case IDENTIFIER:
        case 42:
        case 43:
          args();
          break;
        default:
          jj_la1[5] = jj_gen;
          ;
        }
        break;
      case BREAK:
        jj_consume_token(BREAK);
        break;
      default:
        jj_la1[6] = jj_gen;
        if (jj_2_3(2)) {
          var();
          jj_consume_token(41);
          expr();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IF:
          case NIL:
          case TRUE:
          case FALSE:
          case OP_PLUS:
          case OP_MINUS:
          case BEG_PAR:
          case BEG_BRK:
          case BEG_BRC:
          case LIT_INTEGER:
          case LIT_DOUBLE:
          case LIT_STRING:
          case IDENTIFIER:
          case 42:
          case 43:
            expr();
            break;
          default:
            jj_la1[7] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } finally {
      trace_return("stmt");
    }
  }

  final public void var() throws ParseException {
    trace_call("var");
    try {
      jj_consume_token(IDENTIFIER);
    } finally {
      trace_return("var");
    }
  }

  final public void expr() throws ParseException {
    trace_call("expr");
    try {
      expr1();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OP_AMPER:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_3;
        }
        jj_consume_token(OP_AMPER);
        expr1();
      }
    } finally {
      trace_return("expr");
    }
  }

  final public void expr1() throws ParseException {
    trace_call("expr1");
    try {
      expr2();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OP_BAR:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_4;
        }
        jj_consume_token(OP_BAR);
        expr2();
      }
    } finally {
      trace_return("expr1");
    }
  }

  final public void expr2() throws ParseException {
    trace_call("expr2");
    try {
      expr3();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OP_OR:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_5;
        }
        jj_consume_token(OP_OR);
        expr3();
      }
    } finally {
      trace_return("expr2");
    }
  }

  final public void expr3() throws ParseException {
    trace_call("expr3");
    try {
      expr4();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OP_AND:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_6;
        }
        jj_consume_token(OP_AND);
        expr4();
      }
    } finally {
      trace_return("expr3");
    }
  }

  final public void expr4() throws ParseException {
    trace_call("expr4");
    try {
      expr5();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OP_EQ:
        case OP_NEQ:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_7;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OP_EQ:
          jj_consume_token(OP_EQ);
          expr5();
          break;
        case OP_NEQ:
          jj_consume_token(OP_NEQ);
          expr5();
          break;
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("expr4");
    }
  }

  final public void expr5() throws ParseException {
    trace_call("expr5");
    try {
      expr6();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OP_LT:
        case OP_LE:
        case OP_GT:
        case OP_GE:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_8;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OP_LT:
          jj_consume_token(OP_LT);
          expr6();
          break;
        case OP_LE:
          jj_consume_token(OP_LE);
          expr6();
          break;
        case OP_GT:
          jj_consume_token(OP_GT);
          expr6();
          break;
        case OP_GE:
          jj_consume_token(OP_GE);
          expr6();
          break;
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("expr5");
    }
  }

  final public void expr6() throws ParseException {
    trace_call("expr6");
    try {
      expr7();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OP_PLUS:
        case OP_MINUS:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_9;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OP_PLUS:
          jj_consume_token(OP_PLUS);
          expr7();
          break;
        case OP_MINUS:
          jj_consume_token(OP_MINUS);
          expr7();
          break;
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("expr6");
    }
  }

  final public void expr7() throws ParseException {
    trace_call("expr7");
    try {
      expr8();
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OP_MULT:
        case OP_DIV:
        case OP_MOD:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_10;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OP_MULT:
          jj_consume_token(OP_MULT);
          expr8();
          break;
        case OP_DIV:
          jj_consume_token(OP_DIV);
          expr8();
          break;
        case OP_MOD:
          jj_consume_token(OP_MOD);
          expr8();
          break;
        default:
          jj_la1[19] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("expr7");
    }
  }

  final public void expr8() throws ParseException {
    trace_call("expr8");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP_PLUS:
        jj_consume_token(OP_PLUS);
        primary();
        break;
      case OP_MINUS:
        jj_consume_token(OP_MINUS);
        primary();
        break;
      case 42:
        jj_consume_token(42);
        primary();
        break;
      case 43:
        jj_consume_token(43);
        primary();
        break;
      case IF:
      case NIL:
      case TRUE:
      case FALSE:
      case BEG_PAR:
      case BEG_BRK:
      case BEG_BRC:
      case LIT_INTEGER:
      case LIT_DOUBLE:
      case LIT_STRING:
      case IDENTIFIER:
        primary();
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("expr8");
    }
  }

  final public void primary() throws ParseException {
    trace_call("primary");
    try {
      _primary();
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
          ;
          break;
        default:
          jj_la1[21] = jj_gen;
          break label_11;
        }
        if (jj_2_6(3)) {
          jj_consume_token(DOT);
          jj_consume_token(IDENTIFIER);
          jj_consume_token(BEG_PAR);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IF:
          case NIL:
          case TRUE:
          case FALSE:
          case OP_PLUS:
          case OP_MINUS:
          case BEG_PAR:
          case BEG_BRK:
          case BEG_BRC:
          case LIT_INTEGER:
          case LIT_DOUBLE:
          case LIT_STRING:
          case IDENTIFIER:
          case 42:
          case 43:
            args();
            break;
          default:
            jj_la1[22] = jj_gen;
            ;
          }
          jj_consume_token(44);
          if (jj_2_4(2147483647)) {
            block();
          } else {
            ;
          }
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DOT:
            jj_consume_token(DOT);
            jj_consume_token(IDENTIFIER);
            if (jj_2_5(2147483647)) {
              block();
            } else {
              ;
            }
            break;
          default:
            jj_la1[23] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } finally {
      trace_return("primary");
    }
  }

  final public void _primary() throws ParseException {
    trace_call("_primary");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BEG_BRC:
        block();
        break;
      default:
        jj_la1[25] = jj_gen;
        if (jj_2_8(2)) {
          jj_consume_token(IDENTIFIER);
          jj_consume_token(BEG_PAR);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IF:
          case NIL:
          case TRUE:
          case FALSE:
          case OP_PLUS:
          case OP_MINUS:
          case BEG_PAR:
          case BEG_BRK:
          case BEG_BRC:
          case LIT_INTEGER:
          case LIT_DOUBLE:
          case LIT_STRING:
          case IDENTIFIER:
          case 42:
          case 43:
            args();
            break;
          default:
            jj_la1[24] = jj_gen;
            ;
          }
          jj_consume_token(44);
          if (jj_2_7(2147483647)) {
            block();
          } else {
            ;
          }
        } else if (jj_2_9(2)) {
          jj_consume_token(IDENTIFIER);
          block();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IF:
          case NIL:
          case TRUE:
          case FALSE:
          case BEG_PAR:
          case BEG_BRK:
          case LIT_INTEGER:
          case LIT_DOUBLE:
          case LIT_STRING:
          case IDENTIFIER:
            __primary();
            break;
          default:
            jj_la1[26] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } finally {
      trace_return("_primary");
    }
  }

  final public ExprNode __primary() throws ParseException {
    trace_call("__primary");
    try {
    Token t;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LIT_INTEGER:
        t = jj_consume_token(LIT_INTEGER);
            {if (true) return integerNode(location(t), t.image);}
        break;
      case LIT_DOUBLE:
        t = jj_consume_token(LIT_DOUBLE);
            {if (true) return doubleNode(location(t), t.image);}
        break;
      case LIT_STRING:
        t = jj_consume_token(LIT_STRING);
            {if (true) return new StringLiteralNode(location(t), new ObjectTypeRef("String"),
                                         stringVal(t.image));}
        break;
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
        break;
      case BEG_PAR:
        jj_consume_token(BEG_PAR);
        expr();
        jj_consume_token(44);
        break;
      default:
        jj_la1[27] = jj_gen;
        if (jj_2_11(2147483647)) {
          jj_consume_token(BEG_BRK);
          args();
          jj_consume_token(45);
        } else if (jj_2_12(2147483647)) {
          jj_consume_token(BEG_BRK);
          map_args();
          jj_consume_token(45);
        } else if (jj_2_13(2)) {
          jj_consume_token(BEG_BRK);
          jj_consume_token(46);
          jj_consume_token(45);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BEG_BRK:
            jj_consume_token(BEG_BRK);
            jj_consume_token(45);
            break;
          case IF:
            jj_consume_token(IF);
            condition();
            jj_consume_token(BEG_BRC);
            compstmt();
            jj_consume_token(47);
            if (jj_2_10(2147483647)) {
              else_part();
            } else {
              ;
            }
            break;
          case NIL:
            jj_consume_token(NIL);
            break;
          case TRUE:
            jj_consume_token(TRUE);
            break;
          case FALSE:
            jj_consume_token(FALSE);
            break;
          default:
            jj_la1[28] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("__primary");
    }
  }

  final public void condition() throws ParseException {
    trace_call("condition");
    try {
      condition1();
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OP_AMPER:
          ;
          break;
        default:
          jj_la1[29] = jj_gen;
          break label_12;
        }
        jj_consume_token(OP_AMPER);
        condition1();
      }
    } finally {
      trace_return("condition");
    }
  }

  final public void condition1() throws ParseException {
    trace_call("condition1");
    try {
      condition2();
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OP_BAR:
          ;
          break;
        default:
          jj_la1[30] = jj_gen;
          break label_13;
        }
        jj_consume_token(OP_BAR);
        condition2();
      }
    } finally {
      trace_return("condition1");
    }
  }

  final public void condition2() throws ParseException {
    trace_call("condition2");
    try {
      condition3();
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OP_OR:
          ;
          break;
        default:
          jj_la1[31] = jj_gen;
          break label_14;
        }
        jj_consume_token(OP_OR);
        condition3();
      }
    } finally {
      trace_return("condition2");
    }
  }

  final public void condition3() throws ParseException {
    trace_call("condition3");
    try {
      condition4();
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OP_AND:
          ;
          break;
        default:
          jj_la1[32] = jj_gen;
          break label_15;
        }
        jj_consume_token(OP_AND);
        condition4();
      }
    } finally {
      trace_return("condition3");
    }
  }

  final public void condition4() throws ParseException {
    trace_call("condition4");
    try {
      condition5();
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OP_EQ:
        case OP_NEQ:
          ;
          break;
        default:
          jj_la1[33] = jj_gen;
          break label_16;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OP_EQ:
          jj_consume_token(OP_EQ);
          condition5();
          break;
        case OP_NEQ:
          jj_consume_token(OP_NEQ);
          condition5();
          break;
        default:
          jj_la1[34] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("condition4");
    }
  }

  final public void condition5() throws ParseException {
    trace_call("condition5");
    try {
      condition6();
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OP_LT:
        case OP_LE:
        case OP_GT:
        case OP_GE:
          ;
          break;
        default:
          jj_la1[35] = jj_gen;
          break label_17;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OP_LT:
          jj_consume_token(OP_LT);
          condition6();
          break;
        case OP_LE:
          jj_consume_token(OP_LE);
          condition6();
          break;
        case OP_GT:
          jj_consume_token(OP_GT);
          condition6();
          break;
        case OP_GE:
          jj_consume_token(OP_GE);
          condition6();
          break;
        default:
          jj_la1[36] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("condition5");
    }
  }

  final public void condition6() throws ParseException {
    trace_call("condition6");
    try {
      condition7();
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OP_PLUS:
        case OP_MINUS:
          ;
          break;
        default:
          jj_la1[37] = jj_gen;
          break label_18;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OP_PLUS:
          jj_consume_token(OP_PLUS);
          condition7();
          break;
        case OP_MINUS:
          jj_consume_token(OP_MINUS);
          condition7();
          break;
        default:
          jj_la1[38] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("condition6");
    }
  }

  final public void condition7() throws ParseException {
    trace_call("condition7");
    try {
      condition8();
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OP_MULT:
        case OP_DIV:
        case OP_MOD:
          ;
          break;
        default:
          jj_la1[39] = jj_gen;
          break label_19;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OP_MULT:
          jj_consume_token(OP_MULT);
          condition8();
          break;
        case OP_DIV:
          jj_consume_token(OP_DIV);
          condition8();
          break;
        case OP_MOD:
          jj_consume_token(OP_MOD);
          condition8();
          break;
        default:
          jj_la1[40] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("condition7");
    }
  }

  final public void condition8() throws ParseException {
    trace_call("condition8");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP_PLUS:
        jj_consume_token(OP_PLUS);
        cond();
        break;
      case OP_MINUS:
        jj_consume_token(OP_MINUS);
        cond();
        break;
      case 42:
        jj_consume_token(42);
        cond();
        break;
      case 43:
        jj_consume_token(43);
        cond();
        break;
      case IF:
      case NIL:
      case TRUE:
      case FALSE:
      case BEG_PAR:
      case BEG_BRK:
      case LIT_INTEGER:
      case LIT_DOUBLE:
      case LIT_STRING:
      case IDENTIFIER:
        cond();
        break;
      default:
        jj_la1[41] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("condition8");
    }
  }

  final public void cond() throws ParseException {
    trace_call("cond");
    try {
      _cond();
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
          ;
          break;
        default:
          jj_la1[42] = jj_gen;
          break label_20;
        }
        if (jj_2_14(3)) {
          jj_consume_token(DOT);
          jj_consume_token(IDENTIFIER);
          jj_consume_token(BEG_PAR);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IF:
          case NIL:
          case TRUE:
          case FALSE:
          case OP_PLUS:
          case OP_MINUS:
          case BEG_PAR:
          case BEG_BRK:
          case BEG_BRC:
          case LIT_INTEGER:
          case LIT_DOUBLE:
          case LIT_STRING:
          case IDENTIFIER:
          case 42:
          case 43:
            args();
            break;
          default:
            jj_la1[43] = jj_gen;
            ;
          }
          jj_consume_token(44);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DOT:
            jj_consume_token(DOT);
            jj_consume_token(IDENTIFIER);
            break;
          default:
            jj_la1[44] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } finally {
      trace_return("cond");
    }
  }

  final public void _cond() throws ParseException {
    trace_call("_cond");
    try {
      if (jj_2_15(2)) {
        jj_consume_token(IDENTIFIER);
        jj_consume_token(BEG_PAR);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case NIL:
        case TRUE:
        case FALSE:
        case OP_PLUS:
        case OP_MINUS:
        case BEG_PAR:
        case BEG_BRK:
        case BEG_BRC:
        case LIT_INTEGER:
        case LIT_DOUBLE:
        case LIT_STRING:
        case IDENTIFIER:
        case 42:
        case 43:
          args();
          break;
        default:
          jj_la1[45] = jj_gen;
          ;
        }
        jj_consume_token(44);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case NIL:
        case TRUE:
        case FALSE:
        case BEG_PAR:
        case BEG_BRK:
        case LIT_INTEGER:
        case LIT_DOUBLE:
        case LIT_STRING:
        case IDENTIFIER:
          __primary();
          break;
        default:
          jj_la1[46] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("_cond");
    }
  }

  final public void else_part() throws ParseException {
    trace_call("else_part");
    try {
      if (jj_2_17(2)) {
        jj_consume_token(ELSE);
        jj_consume_token(IF);
        expr();
        jj_consume_token(BEG_BRC);
        compstmt();
        jj_consume_token(47);
        if (jj_2_16(2147483647)) {
          else_part();
        } else {
          ;
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ELSE:
          jj_consume_token(ELSE);
          jj_consume_token(BEG_BRC);
          compstmt();
          jj_consume_token(47);
          break;
        default:
          jj_la1[47] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("else_part");
    }
  }

  final public void args() throws ParseException {
    trace_call("args");
    try {
      expr();
      label_21:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[48] = jj_gen;
          break label_21;
        }
        jj_consume_token(COMMA);
        expr();
      }
    } finally {
      trace_return("args");
    }
  }

  final public void map_args() throws ParseException {
    trace_call("map_args");
    try {
      map();
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[49] = jj_gen;
          break label_22;
        }
        jj_consume_token(COMMA);
        map();
      }
    } finally {
      trace_return("map_args");
    }
  }

  final public void map() throws ParseException {
    trace_call("map");
    try {
      expr();
      jj_consume_token(46);
      expr();
    } finally {
      trace_return("map");
    }
  }

  final public void block() throws ParseException {
    trace_call("block");
    try {
      if (jj_2_18(2147483647)) {
        jj_consume_token(BEG_BRC);
        bparam();
        compstmt();
        jj_consume_token(47);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BEG_BRC:
          jj_consume_token(BEG_BRC);
          compstmt();
          jj_consume_token(47);
          break;
        default:
          jj_la1[50] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("block");
    }
  }

  final public void bparam() throws ParseException {
    trace_call("bparam");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OP_RASGN:
        jj_consume_token(OP_RASGN);
        break;
      case IDENTIFIER:
        f_args();
        jj_consume_token(OP_RASGN);
        break;
      default:
        jj_la1[51] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("bparam");
    }
  }

  final public void f_args() throws ParseException {
    trace_call("f_args");
    try {
      jj_consume_token(IDENTIFIER);
      label_23:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[52] = jj_gen;
          break label_23;
        }
        jj_consume_token(COMMA);
        jj_consume_token(IDENTIFIER);
      }
    } finally {
      trace_return("f_args");
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_3R_111() {
    if (jj_3R_113()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_114()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_scan_token(OP_AMPER)) return true;
    if (jj_3R_107()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_3R_111()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_112()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_3R_109()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_110()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(BEG_BRK)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(BEG_BRK)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_3R_107()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_108()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_105()) return true;
    if (jj_scan_token(BEG_BRC)) return true;
    if (jj_3R_47()) return true;
    if (jj_scan_token(47)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_106()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_scan_token(BEG_BRK)) return true;
    if (jj_scan_token(45)) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(BEG_BRK)) return true;
    if (jj_scan_token(46)) return true;
    if (jj_scan_token(45)) return true;
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_scan_token(BEG_BRK)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(45)) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_scan_token(BEG_BRK)) return true;
    if (jj_3R_29()) return true;
    if (jj_scan_token(45)) return true;
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_scan_token(BEG_PAR)) return true;
    if (jj_3R_40()) return true;
    if (jj_scan_token(44)) return true;
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_scan_token(LIT_STRING)) return true;
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_scan_token(LIT_DOUBLE)) return true;
    return false;
  }

  private boolean jj_3R_93() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_scan_token(7)) {
    jj_scanpos = xsp;
    if (jj_scan_token(8)) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_scan_token(LIT_INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_96()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(BEG_PAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_94()) jj_scanpos = xsp;
    if (jj_scan_token(44)) return true;
    xsp = jj_scanpos;
    if (jj_3R_95()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_87() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    }
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_3R_93()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(BEG_PAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_91()) jj_scanpos = xsp;
    if (jj_scan_token(44)) return true;
    xsp = jj_scanpos;
    if (jj_3R_92()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_86() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_3R_86()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_87()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_scan_token(43)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_scan_token(OP_MOD)) return true;
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_scan_token(42)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_scan_token(OP_DIV)) return true;
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_74() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_scan_token(OP_MINUS)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_scan_token(OP_MULT)) return true;
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_73() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_scan_token(OP_PLUS)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_scan_token(OP_MINUS)) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_68() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) return true;
    }
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_scan_token(OP_PLUS)) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_3R_73()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_74()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_scan_token(OP_GE)) return true;
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_scan_token(OP_GT)) return true;
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(OP_LE)) return true;
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(OP_LT)) return true;
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_3R_67()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_68()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(OP_NEQ)) return true;
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_scan_token(OP_EQ)) return true;
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_62() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) return true;
    }
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_3R_63()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_64()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(OP_AND)) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_3R_61()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_62()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(OP_OR)) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_3R_59()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_60()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_scan_token(OP_BAR)) return true;
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_3R_57()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_58()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(OP_AMPER)) return true;
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_3R_54()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_55()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_3R_49()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_50()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_25()) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) return true;
    }
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(39)) return true;
    if (jj_scan_token(41)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_3R_25()) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_scan_token(4)) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(EMIT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_3R_26()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_32()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_33()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_53()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_145() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_56()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_18() {
    if (jj_scan_token(BEG_BRC)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_144() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_3R_51()) return true;
    if (jj_scan_token(OP_RASGN)) return true;
    return false;
  }

  private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    }
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(BEG_BRC)) return true;
    if (jj_3R_47()) return true;
    if (jj_scan_token(47)) return true;
    return false;
  }

  private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) return true;
    }
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(BEG_BRC)) return true;
    if (jj_3R_31()) return true;
    if (jj_3R_47()) return true;
    if (jj_scan_token(47)) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_3R_40()) return true;
    if (jj_scan_token(46)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_3R_42()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_43()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_3R_40()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_41()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_scan_token(BEG_BRC)) return true;
    if (jj_3R_47()) return true;
    if (jj_scan_token(47)) return true;
    return false;
  }

  private boolean jj_3R_143() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_scan_token(IF)) return true;
    if (jj_3R_40()) return true;
    if (jj_scan_token(BEG_BRC)) return true;
    if (jj_3R_47()) return true;
    if (jj_scan_token(47)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    }
    return false;
  }

  private boolean jj_3_14() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(BEG_PAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_145()) jj_scanpos = xsp;
    if (jj_scan_token(44)) return true;
    return false;
  }

  private boolean jj_3R_141() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) return true;
    }
    return false;
  }

  private boolean jj_3R_142() {
    if (jj_3R_93()) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(BEG_PAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_144()) jj_scanpos = xsp;
    if (jj_scan_token(44)) return true;
    return false;
  }

  private boolean jj_3R_140() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) return true;
    }
    return false;
  }

  private boolean jj_3R_139() {
    if (jj_3R_140()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_141()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_128() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) {
    jj_scanpos = xsp;
    if (jj_3R_138()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_136() {
    if (jj_scan_token(OP_MULT)) return true;
    if (jj_3R_127()) return true;
    return false;
  }

  private boolean jj_3R_135() {
    if (jj_3R_139()) return true;
    return false;
  }

  private boolean jj_3R_134() {
    if (jj_scan_token(43)) return true;
    if (jj_3R_139()) return true;
    return false;
  }

  private boolean jj_3R_138() {
    if (jj_scan_token(OP_MOD)) return true;
    if (jj_3R_127()) return true;
    return false;
  }

  private boolean jj_3R_133() {
    if (jj_scan_token(42)) return true;
    if (jj_3R_139()) return true;
    return false;
  }

  private boolean jj_3R_137() {
    if (jj_scan_token(OP_DIV)) return true;
    if (jj_3R_127()) return true;
    return false;
  }

  private boolean jj_3R_132() {
    if (jj_scan_token(OP_MINUS)) return true;
    if (jj_3R_139()) return true;
    return false;
  }

  private boolean jj_3R_122() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) return true;
    }
    return false;
  }

  private boolean jj_3R_127() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) {
    jj_scanpos = xsp;
    if (jj_3R_134()) {
    jj_scanpos = xsp;
    if (jj_3R_135()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_129() {
    if (jj_scan_token(OP_PLUS)) return true;
    if (jj_3R_121()) return true;
    return false;
  }

  private boolean jj_3R_131() {
    if (jj_scan_token(OP_PLUS)) return true;
    if (jj_3R_139()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_130() {
    if (jj_scan_token(OP_MINUS)) return true;
    if (jj_3R_121()) return true;
    return false;
  }

  private boolean jj_3R_118() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_123() {
    if (jj_scan_token(OP_LT)) return true;
    if (jj_3R_117()) return true;
    return false;
  }

  private boolean jj_3R_121() {
    if (jj_3R_127()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_128()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_126() {
    if (jj_scan_token(OP_GE)) return true;
    if (jj_3R_117()) return true;
    return false;
  }

  private boolean jj_3R_125() {
    if (jj_scan_token(OP_GT)) return true;
    if (jj_3R_117()) return true;
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_124() {
    if (jj_scan_token(OP_LE)) return true;
    if (jj_3R_117()) return true;
    return false;
  }

  private boolean jj_3R_116() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_119()) {
    jj_scanpos = xsp;
    if (jj_3R_120()) return true;
    }
    return false;
  }

  private boolean jj_3R_119() {
    if (jj_scan_token(OP_EQ)) return true;
    if (jj_3R_115()) return true;
    return false;
  }

  private boolean jj_3R_117() {
    if (jj_3R_121()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_122()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_120() {
    if (jj_scan_token(OP_NEQ)) return true;
    if (jj_3R_115()) return true;
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_scan_token(OP_AND)) return true;
    if (jj_3R_113()) return true;
    return false;
  }

  private boolean jj_3R_115() {
    if (jj_3R_117()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_118()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_112() {
    if (jj_scan_token(OP_OR)) return true;
    if (jj_3R_111()) return true;
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_3R_115()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_116()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_scan_token(OP_BAR)) return true;
    if (jj_3R_109()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[53];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x70000f84,0x70000f84,0x70,0x70000f84,0x1000000,0x800000,0x400000,0x200000,0x18000,0x18000,0x1e0000,0x1e0000,0xc00,0xc00,0x7000,0x7000,0x70000f84,0x8000000,0x70000f84,0x8000000,0x70000f84,0x40000000,0x30000384,0x10000000,0x20000384,0x1000000,0x800000,0x400000,0x200000,0x18000,0x18000,0x1e0000,0x1e0000,0xc00,0xc00,0x7000,0x7000,0x30000f84,0x8000000,0x70000f84,0x8000000,0x70000f84,0x30000384,0x8,0x80000000,0x80000000,0x40000000,0x4000000,0x80000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x101,0x101,0x101,0x101,0xcc6,0xcc6,0x0,0xcc6,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xcc6,0x0,0xcc6,0x0,0xcc6,0x0,0xc6,0xc6,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xcc6,0x0,0xcc6,0x0,0xcc6,0xc6,0x0,0x0,0x0,0x0,0x80,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[18];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 53; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 53; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 53; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 53; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 53; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 53; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[48];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 53; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 48; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 18; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
